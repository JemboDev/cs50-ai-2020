import os
import random
import re
import sys
from collections import Counter
from math import isclose

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    distribution = dict()

    # Check if page has outgoing links
    if corpus[page]:
        for link in corpus:
            distribution[link] = (1 - damping_factor) / len(corpus)
            if link in corpus[page]:
                distribution[link] += damping_factor / len(corpus[page])

        return distribution

    # This happens if page has no outgoing links
    for link in corpus:
        distribution[link] = 1 / len(corpus)

    return distribution


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    samples = list()
    pagerank = dict()

    # First sample generated by choosing from a page at random
    samples.append(random.choice(list(corpus)))

    for _ in range(n - 1):
        distribution = transition_model(corpus, samples[-1], damping_factor)

        # random.choices returns a list, so we exctract needed string from it
        sample = random.choices(list(corpus), weights=[distribution[page] for page in distribution], k=1)[0]
        samples.append(sample)

    # Dict w/ how many times each page been sampled
    sampling_result = Counter(samples)

    # Get the probability of link being clicked
    for link in corpus:
        pagerank[link] = sampling_result[link] / n

    # Sorting pagerank by keys
    pagerank = dict(sorted(pagerank.items()))
    
    return pagerank


def linked_pages(corpus, page):
    """
    Return list of pages that have links to current page.

    A page that has no links at all should be interpreted
    as having one link for every page in the corpus (including itself).
    """
    pages = list()

    for link in corpus:
        if page in corpus[link]:
            pages.append(link)

        if not corpus[link]:
            pages.append(link)

    return pages


def number_of_links(corpus, page):
    """
    Return the number of links present on given page.
    If the page has none, return number of pages in corpus.
    """
    return len(corpus[page]) if corpus[page] else len(corpus)


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    pagerank = dict()
    new_pagerank = dict()
    repeat = True

    # Assigning each page a rank of 1 / N, where N is the total number of pages in the corpus.
    for page in corpus:
        pagerank[page] = 1 / len(corpus)

    # Repeatedly calculate new rank values based on all of the current rank values
    while repeat:
        for page in corpus:

            # Probability that we followed a link from a page i to current page.
            followed = 0.0
            for linked_page in linked_pages(corpus, page):
                followed += pagerank[linked_page] / number_of_links(corpus, linked_page)

            new_pagerank[page] = (1 - damping_factor) / len(corpus) + damping_factor * followed

        repeat = False

        # Repeat the process if new PageRank value changes by more than 0.001
        for page in pagerank:
            if not isclose(pagerank[page], new_pagerank[page], abs_tol=0.001):
                repeat = True

            # Assigning new values to the previous ones
            pagerank[page] = new_pagerank[page]

    # Sorting pagerank by keys
    pagerank = dict(sorted(pagerank.items()))

    return pagerank


if __name__ == "__main__":
    main()
